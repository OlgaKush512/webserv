//
// Created by amyroshn on 8/16/22.
//

#ifndef WEBSERV_ASOCKET_HPP
#define WEBSERV_ASOCKET_HPP
#include "webserv.hpp"

class Server;
class Webserv_machine;

class ASocket {
protected:
	int						_socket_fd;
	std::string				_log_msg;
	ASocket();
	ASocket(int socketFd);

public:
	

/******************************************************************************************************************
 ************************************** CONSTRUCTORS/DESTRUCTORS **************************************************
 *****************************************************************************************************************/
 
	
/******************************************************************************************************************
 ******************************************* SOCKET METHODS *******************************************************
 *****************************************************************************************************************/
 
	virtual void close() = 0;
	int getSocketFd() const;
	virtual ~ASocket();

/******************************************************************************************************************
 ************************************************** GETTERS *******************************************************
 *****************************************************************************************************************/

	
	//const sockaddr_in &getAddress() const;
	//int getPort() const;
	//const std::string &getHost() const;
	//const std::vector<const Server *> &getServers() const;

/******************************************************************************************************************
 ************************************************** SETTERS *******************************************************
 *****************************************************************************************************************/
	
	//void setServers(const Server *serv);

/******************************************************************************************************************
 *********************************************** EXCEPTIONS *******************************************************
 *****************************************************************************************************************/	

	class CannotCreateSocketException: public std::exception {
	private:
		const char *_msg;
	public:
		CannotCreateSocketException(const char *msg);
		virtual const char *what() const throw();
	};
	
	class CannotAccessDataException: public std::exception {
	private:
		const char *_msg;
	public:
		CannotAccessDataException(const char *msg);
		virtual const char *what() const throw();
	};
};


#endif //WEBSERV_ASOCKET_HPP
